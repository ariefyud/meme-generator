{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randomNum","Math","floor","random","length","randomMemeImg","url","className","onSubmit","placeholder","onChange","alt","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAWeA,MATf,WACE,OACE,mCACE,qBAAKC,IAAI,mEACT,mD,0CCmESC,E,kDAtEb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVR,E,qDAcd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACVE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAAEV,YAAaQ,S,0BAKnC,SAAaG,GAAQ,IAAD,EACIA,EAAMC,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACbC,KAAKL,SAAL,eACGG,EAAOC,M,0BAKZ,SAAaH,GACXA,EAAMK,iBACN,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC9DC,EAAgBP,KAAKnB,MAAMI,YAAYiB,GAAWM,IACxDR,KAAKL,SAAS,CACZX,UAAWuB,M,oBAIf,WACE,OACE,gCAEE,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACE,uBACEU,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClB6B,YAAY,WACZC,SAAUZ,KAAKd,eAEjB,uBACEY,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClB4B,YAAY,cACZC,SAAUZ,KAAKd,eAEjB,4CAEF,sBAAKuB,UAAU,OAAf,UACE,qBAAKA,UAAU,WAAW9B,IAAKqB,KAAKnB,MAAMG,UAAW6B,IAAI,eACzD,oBAAIJ,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GAhEjB+B,a,MCYbC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.739bf8bb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"/>\r\n      <p>Meme Generator</p>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react'\r\n\r\nclass MemeGenerator extends Component {\r\n  constructor() {\r\n    super()\r\n    // Step 1 > State\r\n    this.state = {\r\n      topText: '',\r\n      bottomText: '',\r\n      randomImg: 'http://i.imgflip.com/1bij.jpg',\r\n      allMemeImgs: []\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  // Step 4 > Fetch API\r\n  componentDidMount() {\r\n    fetch('https://api.imgflip.com/get_memes')\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        const {memes} = response.data\r\n        this.setState({ allMemeImgs: memes})\r\n      })\r\n  }\r\n  \r\n  // Step 3 > handleChange\r\n  handleChange(event) {\r\n    const {name, value} = event.target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  // Step 5 > handleSubmit\r\n  handleSubmit(event) {\r\n    event.preventDefault()\r\n    const randomNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n    const randomMemeImg = this.state.allMemeImgs[randomNum].url\r\n    this.setState({\r\n      randomImg: randomMemeImg\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n      {/* Step 2 > Form */}\r\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n          <input \r\n            name='topText'\r\n            value={this.state.topText}\r\n            placeholder='Top Text' \r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            name='bottomText'\r\n            value={this.state.bottomText}\r\n            placeholder='Bottom Text' \r\n            onChange={this.handleChange}\r\n          />\r\n          <button>Get</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n          <img className=\"meme-img\" src={this.state.randomImg} alt=\"Meme Image\"/>\r\n          <h2 className=\"top\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}